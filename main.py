# pylint: disable=consider-using-f-string,no-value-for-parameter

import time
from datetime import datetime
from json import dumps
from traceback import format_exc

from pymorphy2 import MorphAnalyzer
from redis import from_url
from vk_api.bot_longpoll import VkBotLongPoll

from functions import (check_word_existence, get_new_word, get_word_from_local,
                       msg, vk_session)
from models import Player
from settings import ADMIN, GROUP_ID, REDIS_URL

if __name__ == "__main__":
    longpoll = VkBotLongPoll(vk_session, GROUP_ID, 0)
    morph = MorphAnalyzer(lang='ru')

    redis_db = from_url(REDIS_URL)
    if not redis_db.get('everyday_word'):
        redis_db.set('everyday_word', get_word_from_local(), ex=86460)

    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ')

    while True:
        for event in longpoll.check():
            try:
                if event.t.value == 'message_new':
                    uid: int = event.message['peer_id']
                    text: str = event.message['text'].lower()
                    thisday_word = redis_db.get('everyday_word').decode()
                    print('üì© {}: –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´{}¬ª'.format(uid, text))

                    if not text:
                        continue

                    response: tuple[Player, bool] = Player.get_or_create(id=uid, defaults={'cword': get_new_word()})
                    player, created = response
                    
                    if created:
                        msg(uid, '–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–æ—Ä–¥–ª–∏ ‚Äî —Ç—É —Å–∞–º—É—é –∏–≥—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–æ—Ä–∏–ª–∞ –¢–≤–∏—Ç—Ç–µ—Ä ‚¨úüü®üü©\n–ù—É '
                                 '—á—Ç–æ, —Å—ã–≥—Ä–∞–µ–º? –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, –ø—Ä–æ—Ö–æ–¥–∏, —á–∏—Ç–∞–π –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –Ω–∏–∂–µ –∏ –ø–∏—à–∏ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ üëáüèª',
                            attach='article-210542356_206516_dca4ce9d20bc4be614')
                        continue

                    # ==== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ====
                    if uid in ADMIN:
                        if 'data' in text:
                            if text == 'data':
                                response = Player.select().dicts().execute()
                            else:
                                act_id = text.split()[1]
                                if not act_id.isdigit() and act_id not in ['everyday_word', 'time']:
                                    msg(uid, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.')
                                    continue
                                
                                if act_id == 'everyday_word':
                                    response = [thisday_word]  # type: ignore
                                elif act_id == 'time':
                                    response = [str(datetime.now())]  # type: ignore
                                else:
                                    response = Player.select().where(Player.id == int(act_id)).dicts().execute()
                            msg(uid, str('\n'.join([dumps(i, ensure_ascii=False) for i in list(response)])))
                            continue

                        if 'clear' in text:
                            action, act_id = text.split()[1], text.split()[2]
                            if not act_id.isdigit() or action not in ['all', 'everyday_stats', 'stats']:
                                msg(uid, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.')
                                continue

                            act_player = Player.get(Player.id == int(act_id))

                            if action == 'all':
                                res = act_player.delete_instance()
                                msg(uid, '–£–¥–∞–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.'.format(res))
                            elif action == 'everyday_stats':
                                act_player.everyday_stats = dumps({i: 0 for i in (1, 2, 3, 4, 5, 6, 'wins', 'total')})
                                act_player.save()
                                msg(uid, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @id{} –æ—á–∏—â–µ–Ω–∞.'.format(act_id))
                            elif action == 'stats':
                                act_player.stats = dumps({i: 0 for i in (1, 2, 3, 4, 5, 6, 'wins', 'total')})
                                act_player.save()
                                msg(uid, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @id{} –æ—á–∏—â–µ–Ω–∞.'.format(act_id))
                            continue

                        if 'change everyday_word' in text:
                            word = text.split()[-1]
                            if word == 'everyday_word':
                                msg(uid, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.')
                                continue
                            s = (datetime(
                                datetime.now().year, datetime.now().month, datetime.now().day + 1, 0, 0
                            ) - datetime.now()).seconds
                            redis_db.set('everyday_word', word, ex=s + 3 * 3600)
                            msg(uid, '–°–ª–æ–≤–æ –¥–Ω—è –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ {}'.format(word))
                            continue

                        if '–ø–æ–º–æ—â—å' in text or 'help' in text:
                            msg(uid, '‚Äì change everyday_word <word> ‚Äî –∑–∞–º–µ–Ω—è–µ—Ç —Å–ª–æ–≤–æ –¥–Ω—è –Ω–∞ word\n'
                                     '‚Äì clear <everyday_stats|stats|all> <id> ‚Äî –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ id\n'
                                     '‚†Ä ‚†Äall ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n'
                                     '‚†Ä ‚†Äeveryday_stats ‚Äî —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ª–æ–≤–∞ –¥–Ω—è\n'
                                     '‚†Ä ‚†Ästats ‚Äî —Ç–æ–ª—å–∫–æ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n'
                                     '‚Äì data [{id}|everyday_word|time] ‚Äî –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î\n'
                                     '‚†Ä ‚†Ä{id} ‚Äî –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –æ–± –æ–¥–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ id\n'
                                     '‚†Ä ‚†Äeveryday_word ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ REDIS.everyday_word\n'
                                     '‚†Ä ‚†Ätime ‚Äî —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ')
                    # ======================

                    if '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' in text:
                        is_everyday = any(w in text for w in ['–≤–æ—Ä–¥', '–µ–∂–µ–¥–Ω', '—Å–ª–æ–≤–∞ –¥–Ω—è'])
                        stats = player.get_everyday_stats() if is_everyday else player.get_stats()

                        msg(uid, ('–î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ —Ç—ã –∏–≥—Ä–∞–µ—à—å –≤ {} üéÆ\n'.format(
                            '¬´–í–æ—Ä–¥ –¥–Ω—è¬ª' if is_everyday else '—Å–≤–æ–±–æ–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ'
                        )
                            + '1: {}\n2: {}\n3: {}\n4: {}\n5: {}\n6: {}\n'.format(
                            *[stats[str(i)] for i in range(1, 7)]
                        )
                            + '–í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ: {} –∏–∑ {} —Å—ã–≥—Ä–∞–Ω–Ω{}.'.format(
                            stats['wins'], stats['total'],
                            '–æ–π' if stats['total'] % 10 == 1 and stats['total'] % 100 != 11 else '—ã—Ö'
                        )))
                        continue

                    if any(w in text for w in ['–≤–æ—Ä–¥', '–µ–∂–µ–¥–Ω', '—Å–ª–æ–≤–æ –¥–Ω—è']):
                        if thisday_word.upper() in player.everyday_word:
                            s = (datetime(datetime.now().year, datetime.now().month, datetime.now().day + 1)
                                 - datetime.now()).seconds
                            h, m = s // 3600 - 3, s % 3600 // 60 + 1
                            
                            p_h = '–∞' * (h % 10 != 1) if h // 10 in [0, 2] and h % 10 in range(1, 5) else '–æ–≤'
                            p_m = ('—ã', 'y')[m % 10 == 1] if m // 10 in [0] + list(range(2, 7)) and m % 10 in range(1, 5) else ''
                            story = '\n'.join([' '.join(s.split()[:2]) for s in player.everyday_word.split('\n')[:-1]])
                            msg(uid, '{}\n\n'.format(story)
                                     + '–ö–∞–∂–µ—Ç—Å—è, —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –≤–æ—Ä–¥ –¥–Ω—è —É–∂–µ —Ä–∞–∑–≥–∞–¥–∞–Ω. –û—Ç–¥—ã—Ö–∞–π –¥–æ –∑–∞–≤—Ç—Ä–∞!\n'
                                     '–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ —á–µ—Ä–µ–∑ {} —á–∞—Å{} –∏ {} –º–∏–Ω—É—Ç{} ‚è≥'.format(h, p_h, m, p_m))
                        else:
                            player.new_game(redis_db.get('everyday_word').decode())
                            msg(uid, '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —è –∑–∞–≥–∞–¥—ã–≤–∞—é –ª—é–±–æ–µ —Å–ª–æ–≤–æ –∏–∑ –ø—è—Ç–∏ –±—É–∫–≤, –∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –µ–≥–æ –æ—Ç–≥–∞–¥—ã–≤–∞—é—Ç. '
                                     '–¢–æ–ª—å–∫–æ –±–µ–∑ —Å–ø–æ–π–ª–µ—Ä–æ–≤! üòâ \n–°–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –æ—Ç–≥–∞–¥—ã–≤–∞–π –±—ã—Å—Ç—Ä–µ–µ –Ω–∏—Ö, '
                                     '—Ç—Ä–∞—Ç—è –º–µ–Ω—å—à–µ –ø–æ–ø—ã—Ç–æ–∫. \n\n–ò—Ç–∞–∫, –∏–≥—Ä–∞–µ–º –≤ –≤–æ—Ä–¥ –¥–Ω—è! ‚¨úüü®üü© –ü–∏—à–∏ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ...')
                            if not player.everyday_word:
                                player.toggle_push('everyday', True)
                        continue

                    if '–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø—É—à–∏' in text:
                        player.toggle_push('everyday')
                        if player.get_push('everyday'):
                            msg(uid, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Å–ª–æ–≤–µ –≤ ¬´–í–æ—Ä–¥–µ –¥–Ω—è¬ª '
                                     '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00! üïô')
                        else:
                            msg(uid, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. üîï –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö –æ–±—Ä–∞—Ç–Ω–æ, '
                                     '–Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø—É—à–∏¬ª.')
                        continue

                    if text.split()[-1] in ['–ø–æ–º–æ—â—å', 'help']:
                        msg(uid, '–†–∞–∑–±–µ—Ä—ë–º—Å—è, —á—Ç–æ –∫ —á–µ–º—É:\n'
                                 '‚†Ä‚Äì –ù–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–ª–æ–≤–æ –∏–∑ –ø—è—Ç–∏ –±—É–∫–≤ –∏ –≤–µ—Å–µ–ª—å–µ –Ω–∞—á–Ω—ë—Ç—Å—è!\n'
                                 '‚†Ä‚Äì –ù–∞–ø–∏—à–∏ ¬´–≤–æ—Ä–¥ –¥–Ω—è¬ª, –∏ –º—ã —Å—ã–≥—Ä–∞–µ–º –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–µ–∂–∏–º ¬´–í–æ—Ä–¥ –¥–Ω—è¬ª!\n'
                                 '‚†Ä‚Äì –ù–∞–ø–∏—à–∏ ¬´—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞¬ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–≤–æ–∏—Ö –∏–≥—Ä.\n'
                                 '‚†Ä‚Äì –ù–∞–ø–∏—à–∏ ¬´—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–¥–∞ –¥–Ω—è¬ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ä–µ–∂–∏–º–µ ¬´–í–æ—Ä–¥ –¥–Ω—è¬ª.\n'
                                 '‚†Ä‚Äì –ù–∞–ø–∏—à–∏ ¬´–ø–æ–º–æ—â—å¬ª, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å —ç—Ç—É –ø—Ä–µ–∫—Ä–∞—Å–Ω—É—é —Å–ø—Ä–∞–≤–∫—É.\n'
                                 '‚†Ä‚Äì –ù–∞–ø–∏—à–∏ ¬´–ø—Ä–∞–≤–∏–ª–∞¬ª, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –ø—Ä–∞–≤–∏–ª–∞ –í–æ—Ä–¥–ª–∏.\n'
                                 '‚†Ä‚Äì –ù–∞–ø–∏—à–∏ ¬´–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø—É—à–∏¬ª, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ '
                                 '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ ¬´–í–æ—Ä–¥ –¥–Ω—è¬ª.\n\n'
                                 '–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã, —Ç–æ –∑–∞–≥–ª—è–¥—ã–≤–∞–π –≤ —Å—Ç–∞—Ç—å—é üëáüèª',
                            attach='article-210542356_206516_dca4ce9d20bc4be614'
                            )
                        continue
                    
                    if text.split()[-1] in ['–ø—Ä–∞–≤–∏–ª–∞', 'rules']:
                        msg(uid, '–õ–æ–≤–∏ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã, —è —Ç–∞–º –≤—Å—ë –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–ª üëáüèª',
                            attach='article-210542356_206516_dca4ce9d20bc4be614')
                        continue

                    if not player.story:
                        player.story = ''

                    player.uword = text.split()[-1].lower()

                    if not check_word_existence(player.uword):
                        msg(uid, '{}–ù–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ\n{}'.format(player.story,
                                                              player.used_letters))
                        continue

                    mask, lmask = '', ['*', '*', '*', '*', '*', '‚†Ä']
                    for i in range(5):
                        if player.uword[i] == player.cword[i]:
                            mask += 'üü©'
                            lmask = list(lmask)
                            lmask[i] = player.uword[i].upper()
                            lmask = ''.join(lmask)  # type: ignore
                            lmask += player.uword[i]
                        elif (player.uword[i] in player.cword
                              and player.uword[:i].count(player.uword[i])
                              != player.cword.count(player.uword[i])
                              and player.uword[i]
                              != player.cword[player.uword.rfind(player.uword[i])]):
                            mask += 'üü®'
                            lmask += player.uword[i].upper()
                        else:
                            mask += '‚¨ú'
                            lmask += player.uword[i]

                        if player.uword[i].upper() in player.used_letters:
                            a = list(player.used_letters)
                            a.remove(player.uword[i].upper())
                            player.used_letters = ''.join(a)

                    msg(uid, '{}{}/6: {}‚†Ä ‚†Ä{}\n{}'.format(player.story, player.guesses,
                                                          mask, ''.join(lmask), player.used_letters))

                    player.story += '{}/6: {}‚†Ä ‚†Ä{}\n'.format(player.guesses, mask, ''.join(lmask))

                    if player.uword == player.cword:
                        num_to_word = {1: '–ø–µ—Ä–≤–æ–π', 2: '–≤—Ç–æ—Ä–æ–π', 3: '—Ç—Ä–µ—Ç—å–µ–π',
                                       4: '—á–µ—Ç–≤—ë—Ä—Ç–æ–π', 5: '–ø—è—Ç–æ–π', 6: '–ø–æ—Å–ª–µ–¥–Ω–µ–π'}
                        if player.cword == thisday_word:
                            story = '\n'.join([' '.join(s.split()[:2]) for s in player.story.split('\n')[:-1]])
                            msg(uid, '–≠—Ç–æ –ø–æ–±–µ–¥–∞! –¢—ã —É–≥–∞–¥–∞–ª –≤–æ—Ä–¥ –¥–Ω—è '
                                     '{} c {} –ø–æ–ø—ã—Ç–∫–∏.\n'.format(player.cword.upper(), num_to_word[player.guesses]))
                            msg(uid, '–î–µ–ª–∏—Å—å —Å–≤–æ–µ–π –ø–æ–±–µ–¥–æ–π –≤ –≤–æ—Ä–¥–µ –¥–Ω—è —Å –¥—Ä—É–∑—å–º–∏:\n\n{}'.format(story))
                            player.everyday_word = player.story
                        else:
                            msg(uid, '–≠—Ç–æ –ø–æ–±–µ–¥–∞! –¢—ã –∑–∞–≤–æ—Ä–¥–ª–∏–ª —Å–ª–æ–≤–æ '
                                     '{} —Å {} –ø–æ–ø—ã—Ç–∫–∏. '.format(player.cword.upper(), num_to_word[player.guesses])
                                     + '–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! ‚úäüèª\n–ë–æ–ª—å—à–µ –æ–± —ç—Ç–æ–º —Å–ª–æ–≤–µ: '
                                     'https://ru.wiktionary.org/wiki/{}.'.format(player.cword))
                        player.win(player.guesses, player.cword == thisday_word)
                    else:
                        player.increase_guesses()

                    if player.guesses == 7:
                        if player.cword == thisday_word:
                            story = '\n'.join([' '.join(s.split()[:2]) for s in player.story.split('\n')[:-1]])
                            msg(uid, '–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª üòî –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: {0}.\n'.format(player.cword))
                            msg(uid, '–î–µ–ª–∏—Å—å —Ö–æ–¥–æ–º —Ä–µ—à–µ–Ω–∏—è –≤–æ—Ä–¥–∞ –¥–Ω—è —Å –¥—Ä—É–∑—å—è–º–∏: \n\n{}'.format(story))
                            player.everyday_word = player.story
                        else:
                            msg(uid, '–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª üòî –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: {0}.\n'.format(player.cword)
                                + '–ë–æ–ª—å—à–µ –æ–± —ç—Ç–æ–º —Å–ª–æ–≤–µ: https://ru.wiktionary.org/wiki/{0}.'.format(player.cword))
                        player.lose(player.cword == thisday_word)

                    player.save()
            except Exception:
                msg(ADMIN[0], '–ü–æ–π–º–∞–ª–∏ –æ—à–∏–±–∫—É. –°–º–æ—Ç—Ä–∏ —Ç—Ä–µ–π—Å–±–µ–∫:\n\n{}'.format('\n'.join(format_exc().split('\n')[1:])))
        if (datetime.now().hour + 3, datetime.now().minute, datetime.now().second) == (24, 0, 0):
            redis_db.set('everyday_word', get_word_from_local(), ex=86460)
            time.sleep(1)
        if (datetime.now().hour + 3, datetime.now().minute, datetime.now().second) == (10, 0, 0):
            all_players: list[Player] = Player.select()
            thisday_word = redis_db.get('everyday_word').decode()
            for p in all_players:
                if p.get_push('everyday') and thisday_word.upper() not in p.everyday_word:
                    msg(p.id, '–ü—Ä–∏–≤–µ—Ç! –í —Ä–µ–∂–∏–º–µ ¬´–í–æ—Ä–¥ –¥–Ω—è¬ª –ø–æ—è–≤–∏–ª–æ—Å—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ. –°—ã–≥—Ä–∞–µ–º? –ü–∏—à–∏ ¬´–≤–æ—Ä–¥ –¥–Ω—è¬ª –∏ –ø–æ–≥–Ω–∞–ª–∏! '
                              '‚¨úüü®üü©\n\n–û—Ç–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–æ–∂–Ω–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã ¬´–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø—É—à–∏¬ª.')
            time.sleep(1)
